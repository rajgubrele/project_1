# -*- coding: utf-8 -*-
"""input.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PyipuVyrpniaToiqRoLIc09Gha02IqAR
"""

##############
# This is input file of moudle file power_method.py where we have a function power_method_new
# The outputs of this function are number of iteration (k), dominant (or largest) eigenvalue (E), eigenvector (X) and tolerance (e) respectivley
# On condition of "True" intprnt and pltn it provides intermediate iteration and plot of largest eigenvaule vs number of iteration respectivley
# In this file we will input certain arguements of function which is obtained from problem and user
# The discription of each argument given next to that and then finally we will call the function 
##############
from power_method import *
A = np.array([[1,2,0,0,0],[2,1,2,0,0],[0,2,1,2,0],[0,0,2,1,2],[0,0,0,2,1]]) # < problem matrix, 1st argument of function "power_method_new" , and it is a numpy array of order n*n >
X = np.array([1,2,3,2,1]) # < Guess vector, 2nd argument of function "power_method_new" , and it is a numpy array of order n >                                         
e = 0.00001    # < Permissable tolerance, 3rd argument of function "power_method_new" , it is float  >                                          
intprnt =True  # < If need intermediate steps then 'intprnt = True' otherwise 'intprnt= False', 4th argument of function "power_method_new"  >
pltn = True    # < If need plot then 'pltn=True' otherwise 'pltn=Flase', 5th argument of function "power_method_new"  >
max_iter = 100 # Max number of allowed itreation upto user wants to iterate , 6th argument of function "power_method_new" and should be an integer                                            
power_method_new(A,X, e,intprnt, pltn, max_iter)    # < Calling the function >