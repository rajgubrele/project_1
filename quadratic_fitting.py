# -*- coding: utf-8 -*-
"""quadratic fitting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pMkOUQAaDnDZBJHb5au21PBfpZyaskGZ
"""

#-----------------------------------  Quadratic Fit Method  ----------------------------------------
#This module contains the definition of function : Quadratic Curve Fitting
#-----Arguements---------
#X----------- data points on the x-axis-----independent variable
#y----------- data points on the y-axis-----dependent variable
#skip--------- It will skip the number of values between two points to make subset.
#T_1---------- It is the independent variable on which dependent variable K depends. It gives the values for plotting the quadratic curve.
#R_value1------It is the first point at which we wants to calculate the value of quadratic equation.
#R_value2------It is the second point at which we wants to calculate the value of quadratic equation.
#-------------------------------------------**************---------------------------
#--------------------------Steps for using the module--------------------------------
#1. import numpy 
#2. import quadratic fitting.py
#3. Given the independent and dependent data values---- X,y
#4. Enter the step size between two points for making the subset----- skip
#5. Give the data values of independent variable to obtain continous curve.------T_1
#6. Enter the 2 values at which we want the value of curve equation.----------R_value1, R_value2
#------------Process--------------------------------
#We will enter the data points X and y.
#Enter the value of skip. 
#T is the subset of X.
#K is the subset of y.
#We will find the subset of the X and y named as T and K respectively.
#We create two matrix: A and B.
#We get another matrix M by product of inverse of A and B.
#M matrix returns the value of a, b and c.
#a, b and c are the coefficients of the equation of quadratic curve.
#we will get return the equation of quadratic curve i.e., K(T) using a, b and c.
#We will find the regression coefficient i.e., r^2 term.
#For some values of T, we find the value of K.
#plot the subset points, curve and the value of K at some point T.
###################################################################################
###################################################################################
import numpy as np
import matplotlib.pyplot as plt
def quadratic_fit(X,y,skip,T_1, R_value1, R_value2):
  try:
    
    p=len(X)
    q=len(y)
    p=q; p<q
    x=open('Quadratic_fitting.txt','w')


    if len(X)%2<=0 and len(y)%2<=0:      # Making subset of array
       K = [y[0]]
       c = 0
       for c in range(0,q-2,skip+1):
         K.append(y[c+1])
         T = [X[0]]
         c = 0
       for c in range(0,p-2,skip+1):
        T.append(X[c+1])
    elif len(X)%2!=0 and len(y)%2!=0:
       K = []
       c = 0
       for c in range(0,q-2,skip+1):
         K.append(y[c])
         T = []
         c = 0
       for c in range(0,p-2,skip+1):
        T.append(X[c])
    K.append(y[q-1])
    T.append(X[p-1])
    #print(T)           # subset of X array
    #print(K)           # subset of y array
    arr=zip(T,K)
    print('Array in the form of (x,y)',file=x)
    print( tuple(arr),file = x)    # array of (T,K)
    #put initial data
    sum_x=0
    sum_x_square=0
    sum_x_cube=0
    sum_x_quad=0
    sum_y=0
    sum_x_y=0
    sum_x2_y=0
     
     #creating elements of matrix using loop
    i=0
    for i in range(0,len(K),1):
        sum_x = sum_x + T[i]
        sum_x_square = sum_x_square + T[i]**2
        sum_x_cube = sum_x_cube + T[i]**3
        sum_x_quad = sum_x_quad + T[i]**4
        sum_y = sum_y + K[i]
        sum_x_y = sum_x_y + T[i]*K[i]
        sum_x2_y = sum_x2_y + (T[i]**2)*K[i]
        while i<len(K):
          i=i+1
    
    
    #introducing matrix
    A = np.matrix([[len(K) , sum_x, sum_x_square],[sum_x, sum_x_square, sum_x_cube], [sum_x_square, sum_x_cube, sum_x_quad]])
    B=np.matrix([[sum_y],[sum_x_y],[sum_x2_y]])
    A_inv=np.linalg.inv(A)
    #value of the coefficient of x , x^2 and constant term.
    M=np.dot(A_inv,B)
    a=round(M[0,0],3)
    b=round(M[1,0],3)
    c=round(M[2,0],3)
    print('Values of a, b and c are {}, {} and {}'.format(a,b,c),file = x)
    K_1 = a + b*T_1 +c*(T_1**2)
    print('equation of quadratic curve-- \n K = {} + ({})T + ({}T*2)'.format(a,b,c),file = x)
    
    
    #finding the r^2 term
    R = T
    P = K
    P_bar=np.sum(P)/len(P)
    a1=0
    b1=0
    for i in range(len(P)):
      b1 = b1+ (P[i] - a - b*R[i] - c*(R[i]**2))**2
      a1 = a1 +  (P[i]-P_bar)**2
      while i<len(P):
        i=i+1
        reg_coeff= (1 - b1/a1)
    print('r^2 term is {:.6f}'.format(reg_coeff),file = x)
    
    
    #defining function
    def P(R):
      return a + b*R +c*(R**2)
   
   
    #finding K at any value of T
  
    print('K_value at first value is ',P(R_value1),file = x)
  
    print('K_value at second value is ',P(R_value2), file = x)
   
    plt.plot(T,K,'or', T_1,K_1,'b--',R_value1,P(R_value1),"k*",R_value2,P(R_value2),"g*")       #plotting command
    plt.xlabel('T')
    plt.ylabel('K')
    plt.legend(['subset of given points','quadratic fit ','T_value=51 ', 'T_value2=192.8'])
    plt.title('Plotting of quadratic fit')
    plt.grid('on')
    plt.show()
  except IndexError:
    print('provide the proper index of X and y array')
  except UnboundLocalError:
    print('local variable is not referenced')
  except ValueError:
    print('X and y must have same first dimension')
  except TypeError:
    print('enter proper value, this is type error')
  x.close()
  return